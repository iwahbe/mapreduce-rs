-1) 1
!= 4
" 1
"../mapreduce.h" 1
"1"); 1
"r"); 1
#include 5
%d\n", 2
&size, 1
((token 1
((value 1
(getline(&line, 1
*argv[]) 1
*dummy 1
*file_name) 1
*fp 1
*key, 1
*line 1
*token, 1
*value; 1
+ 1
- 1
0; 2
<assert.h> 1
<stdio.h> 1
<stdlib.h> 1
<string.h> 1
= 9
> 1
Aenean 32
Aliquam 38
Class 6
Cras 34
Curabitur 40
Donec 62
Duis 36
Etiam 44
FILE 1
Fusce 38
Getter 1
In 50
Integer 52
Interdum 8
Lorem 2
MR_DefaultHashPartition); 1
MR_Emit(token, 1
MR_Run(argc 1
Maecenas 48
Map(char 1
Map, 1
Mauris 40
Morbi 30
NULL) 2
NULL); 1
NULL; 1
Nam 40
Nulla 54
Nullam 38
Nunc 28
Orci 8
Pellentesque 36
Phasellus 58
Praesent 42
Proin 32
Quisque 30
Reduce(char 1
Reduce, 1
Sed 76
Suspendisse 56
Ut 44
Vestibulum 38
Vivamus 50
\t\n\r")) 1
a 96
a, 8
a. 6
ac 118
ac, 14
ac. 8
accumsan 42
accumsan, 10
accumsan. 4
ad 6
adipiscing 2
aliquam 30
aliquam, 4
aliquam. 4
aliquet 34
aliquet, 10
aliquet. 4
amet 72
amet, 14
amet. 8
ante 50
ante, 6
ante. 14
aptent 6
arcu 36
arcu, 8
arcu. 10
argc 6
argc); 1
argc, 1
argv 1
assert(argc 1
assert(fp 1
assert(num_map 1
assert(num_part 1
at 114
at, 12
at. 4
atoi(argv[1])); 1
atoi(argv[2])); 1
auctor 32
auctor. 8
augue 42
augue, 6
augue. 12
bibendum 24
bibendum. 12
blandit 34
blandit, 4
blandit. 14
char 4
commodo 16
commodo, 10
commodo. 2
condimentum 32
condimentum, 6
condimentum. 6
congue 46
congue, 6
congue. 8
consectetur 40
consectetur, 2
consectetur. 6
consequat 36
consequat, 2
consequat. 2
conubia 6
convallis 26
convallis, 4
convallis. 4
count 1
count); 1
count++; 1
cursus 40
cursus, 2
cursus. 2
dapibus 32
dapibus, 4
dapibus. 10
diam 34
diam, 6
diam. 12
dictum 24
dictum, 2
dictum. 12
dictumst. 6
dignissim 46
dignissim, 8
dignissim. 8
dis 8
dolor 28
dolor, 8
dolor. 6
dui 38
dui, 10
dui. 12
efficitur 28
efficitur, 4
efficitur. 8
egestas 34
egestas, 12
egestas. 4
eget 88
eget, 10
eget. 8
eleifend 30
eleifend, 10
eleifend. 8
elementum 24
elementum, 2
elementum. 4
elit 50
elit, 12
elit. 16
enim 34
enim, 8
enim. 18
erat 36
erat, 4
erat. 14
eros 38
eros, 4
eros. 12
est 36
est, 10
est. 12
et 130
et, 10
et. 6
eu 112
eu, 14
eu. 12
euismod 34
ex 38
ex, 6
ex. 20
facilisi. 10
facilisis 26
facilisis, 4
facilisis. 10
fames 8
faucibus 46
faucibus, 4
faucibus. 8
fclose(fp); 1
felis 28
felis, 6
felis. 22
fermentum 36
fermentum, 2
fermentum. 12
feugiat 32
feugiat, 2
feugiat. 8
finibus 34
finibus. 4
fopen(file_name, 1
fp) 1
free(line); 1
fringilla 34
fringilla, 6
get_next(key, 1
get_next, 1
gravida 34
gravida, 8
habitasse 6
hac 6
hendrerit 38
hendrerit, 6
hendrerit. 4
himenaeos. 6
iaculis 30
iaculis, 6
iaculis. 8
id 88
id, 14
id. 6
imperdiet 26
imperdiet, 4
imperdiet. 8
in 74
in, 10
in. 10
inceptos 6
int 4
interdum 26
interdum. 6
ipsum 48
ipsum, 2
ipsum. 14
justo 42
justo, 4
justo. 12
key, 1
lacinia 44
lacinia, 2
lacinia. 12
lacus 22
lacus, 8
lacus. 10
laoreet 32
laoreet, 6
laoreet. 6
lectus 30
lectus, 8
lectus. 14
leo 34
leo, 10
leo. 6
libero 54
libero, 6
libero. 26
ligula 60
ligula, 20
ligula. 10
line; 1
litora 6
lobortis 52
lobortis. 4
lorem 46
lorem, 8
lorem. 26
luctus 42
luctus, 2
luctus. 6
magna 42
magna, 2
magna. 6
magnis 8
main(int 1
malesuada 50
malesuada. 6
massa 38
massa, 20
massa. 18
mattis 36
mattis, 2
mattis. 4
mauris 36
mauris, 10
mauris. 10
maximus 36
maximus, 8
maximus. 4
metus 24
metus, 4
metus. 10
mi 56
mi, 4
mi. 16
molestie 18
molestie, 6
molestie. 8
mollis 30
mollis, 2
mollis. 4
montes, 8
mus. 8
nascetur 8
natoque 8
nec 88
nec, 6
nec. 4
neque 44
neque, 14
neque. 12
nibh 36
nibh, 8
nibh. 12
nisi 36
nisi, 6
nisi. 12
nisl 22
nisl, 6
nisl. 10
non 96
non, 6
non. 8
nostra, 6
nulla 40
nulla, 8
nulla. 8
num_map, 2
num_part, 1
num_part; 1
nunc 40
nunc, 8
nunc. 10
odio 42
odio, 6
odio. 16
orci 46
orci, 8
orci. 12
ornare 30
ornare, 2
ornare. 10
partition_number) 1
partition_number)) 1
parturient 8
pellentesque 32
pellentesque, 2
pellentesque. 8
penatibus 8
per 12
pharetra 46
pharetra, 10
pharetra. 6
placerat 36
placerat, 2
placerat. 6
platea 6
porta 24
porta, 8
porta. 8
porttitor 36
porttitor, 2
porttitor. 2
posuere 36
posuere, 4
posuere. 8
potenti. 8
pretium 38
pretium, 4
pretium. 4
primis 8
printf("%s 1
printf("argc 1
pulvinar 38
pulvinar, 2
pulvinar. 4
purus 44
purus, 12
purus. 10
quam 38
quam, 20
quam. 8
quis 112
quis, 8
quis. 6
rhoncus 18
rhoncus, 10
rhoncus. 6
ridiculus 8
risus 36
risus, 6
risus. 10
rutrum 50
rutrum, 8
rutrum. 4
sagittis 24
sagittis, 2
sagittis. 14
sapien 40
sapien, 10
sapien. 16
scelerisque 30
scelerisque. 10
sed 102
sed, 16
sed. 6
sem 34
sem, 16
sem. 20
semper 34
semper, 4
semper. 6
sit 94
size 1
size_t 1
sociosqu 6
sodales 24
sodales. 4
sollicitudin 28
sollicitudin. 10
strsep(&dummy, 1
suscipit 32
suscipit, 4
suscipit. 4
taciti 6
tellus 46
tellus, 8
tellus. 8
tempor 34
tempor, 6
tempor. 8
tempus 40
tempus. 2
tincidunt 54
tincidunt, 10
tincidunt. 18
torquent 6
tortor 36
tortor, 10
tortor. 14
tristique 34
tristique, 2
tristique. 6
turpis 56
turpis, 8
turpis. 10
ullamcorper 26
ullamcorper. 10
ultrices 28
ultrices, 10
ultrices. 10
ultricies 34
ultricies. 6
urna 26
urna, 8
urna. 8
ut 98
ut, 6
ut. 10
varius 44
varius, 4
varius. 6
vehicula 26
vehicula, 4
vehicula. 10
vel 114
vel, 10
vel. 14
velit 38
velit, 16
velit. 12
venenatis 32
venenatis, 6
venenatis. 4
vestibulum 52
vestibulum, 14
vestibulum. 6
vitae 102
vitae, 10
viverra 36
viverra, 8
viverra. 6
void 2
volutpat 44
volutpat, 4
volutpat. 8
vulputate 34
vulputate, 2
vulputate. 4
while 3
{ 5
} 5
2, 2
3); 1
 1166
